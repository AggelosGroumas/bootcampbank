package ebanking.dao;

import ebanking.exceptions.AccountNotFoundException;
import ebanking.exceptions.WithdrawAmountException;
import ebanking.model.Account;
import org.slf4j.Logger;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import static org.slf4j.LoggerFactory.getLogger;

/**
 * @author <a href="mailto:a.groumas@app-art.gr">Aggelos Groumas</a>
 */
public class AccountDao {
    private static final Logger LOGGER = getLogger(AccountDao.class);

    private Connection connection;

    public AccountDao(Connection connection) {
        this.connection = connection;
    }

    public Account findById(Integer id) throws AccountNotFoundException {
        String query = "select * from account where id = (?)";
        Account found = null;
        PreparedStatement pst;
        ResultSet rs;

        try {
            pst = connection.prepareStatement(query);
            pst.setInt(1, id);
            rs = pst.executeQuery();

            if (rs.next()) {
                found = new Account(rs.getInt("id"), rs.getString("name"), rs.getDouble("balance"));
            } else {
                throw new AccountNotFoundException(String.format("Account with id:%d not found!\n", id));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return found;
    }

    public List<Account> findUserByUsername(String username) throws AccountNotFoundException {
        List<Account> accounts = new ArrayList<>();

        String findAccountsByUsernameQuery = "SELECT acc.id, acc.balance, acc.name FROM account acc, useraccount uacc, user u WHERE acc.id = uacc.accountid AND uacc.userid = u.id AND u.username = (?)";
        PreparedStatement pst;
        ResultSet rs;

        try {
            pst = connection.prepareStatement(findAccountsByUsernameQuery);
            pst.setString(1, username);
            rs = pst.executeQuery();
            while (rs.next()) {
                accounts.add(new Account(rs.getInt("id"), rs.getString("name"), rs.getDouble("balance")));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        if (accounts.isEmpty()) {
            throw new AccountNotFoundException(String.format("Username: %s does not have any accounts.\n", username));
        }
        return accounts;
    }

    public int save(Account account) {
        int autoGeneratedID = -1;
        String insertQuery = "INSERT INTO account(balance, name) VALUES (?, ?)";
        try {
            PreparedStatement pst = connection.prepareStatement(insertQuery);
            pst.setDouble(1, 0.0);
            pst.setString(2, account.getName());
            pst.executeUpdate();

            ResultSet tableKeys = pst.getGeneratedKeys();
            tableKeys.next();
            autoGeneratedID = tableKeys.getInt(1);
            LOGGER.debug("Account {} created. ID is : {}\n", account.getName(), autoGeneratedID);


        } catch (SQLException e) {
            e.printStackTrace();
        }
        return autoGeneratedID;
    }

    public Account depositAmount(Double amount, Integer id) throws AccountNotFoundException {
        Account account = findById(id);
        account.incrementBalance(amount);

        String query = "update account set balance = (?1) where id = (?2)";
        try {
            PreparedStatement pst = connection.prepareStatement(query);
            pst.setDouble(1, account.getBalance());
            pst.setInt(2, account.getId());
            pst.executeUpdate();

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return account;
    }

    public Account withdrawAmount(Double amount, Integer id) throws AccountNotFoundException, WithdrawAmountException {
        Account account = findById(id);
        account.reduceBalance(amount);

        String query = "update account set balance = (?1) where id = (?2)";
        PreparedStatement pst;
        try {
            pst = connection.prepareStatement(query);
            pst.setDouble(1, account.getBalance());
            pst.setInt(2, account.getId());
            pst.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return account;
    }
}
